export async function generateSignal(data: {
  volume: { [key: string]: { spike: number; isSignificant: boolean } };
  orderBook: { buyerPressure: boolean };
  rsi: { [key: string]: number };
  macd: { [key: string]: { macd: number; signal: number; histogram: number } };
  currentPrice: number;
}) {
  try {
    if (!client || !symbol) {
      throw new Error('Client or symbol not initialized');
    }

    const { volume, orderBook, rsi, macd, currentPrice } = data;
    const news = await fetchNewsSentiment();

    const use5mConfirmation = false;

    let longScore = 0;
    let shortScore = 0;

    // === LONG CONDITIONS ===
    if (macd['1h'].histogram > 0) longScore += 2;
    if (rsi['1h'] > 50) longScore += 1;
    if (!use5mConfirmation || (rsi['5m'] < 25 && volume['5m'].isSignificant)) longScore += 1;
    if (rsi['1m'] < 20) longScore += 2;
    if (volume['1m'].isSignificant) longScore += 1;
    if (orderBook.buyerPressure) longScore += 1;
    if (macd['1m'].histogram > 0) longScore += 1;
    if (news.sentiment === 'Positive') longScore += 1;

    // === SHORT CONDITIONS ===
    if (macd['1h'].histogram < 0) shortScore += 2;
    if (rsi['1h'] < 50) shortScore += 1;
    if (!use5mConfirmation || (rsi['5m'] > 75 && volume['5m'].isSignificant)) shortScore += 1;
    if (rsi['1m'] > 80) shortScore += 2;
    if (volume['1m'].isSignificant) shortScore += 1;
    if (!orderBook.buyerPressure) shortScore += 1;
    if (macd['1m'].histogram < 0) shortScore += 1;
    if (news.sentiment === 'Negative') shortScore += 1;

    const threshold = 5;

    logger.info({
      context: "Signal scoring",
      symbol,
      longScore,
      shortScore,
      rsi,
      macd,
      volume,
      orderBook,
      news: news.sentiment,
    });



    if (longScore >= threshold && longScore > shortScore) {
      let stopLoss = await calculateStopLoss(client, symbol, currentPrice, 'LONG');
      let takeProfit = await calculateTakeProfit(symbol, currentPrice, 'LONG');

      const signal = {
        type: 'LONG',
        currentPrice,
        symbol,
        rsi,
        macd,
        volume,
        orderBook,
        stopLoss,
        takeProfit,
        news: news.sentiment,
        confidence: `${longScore}/10`,
      };
      logger.info(`Generated LONG signal for ${symbol}`);
      return signal;
    }

    if (shortScore >= threshold && shortScore > longScore) {
      let stopLoss = await calculateStopLoss(client, symbol, currentPrice, 'SHORT');
      let takeProfit = await calculateTakeProfit(symbol, currentPrice, 'SHORT');

      const signal = {
        type: 'SHORT',
        symbol,
        currentPrice,
        rsi,
        macd,
        volume,
        orderBook,
        stopLoss,
        takeProfit,
        news: news.sentiment,
        confidence: `${shortScore}/10`,
      };
      logger.info(`Generated SHORT signal for ${symbol}`);
      return signal;
    }

    /* 
     const signal = {
      type: 'NEUTRAL',
      currentPrice,
      symbol,
      rsi,
      macd,
      volume,
      orderBook,
      stopLoss,
      takeProfit,
      news: news.sentiment,
      confidence: 'LOW',
    };

    return signal;
    */

    logger.info(`Generated NEUTRAL signal for ${symbol}`);

    return null
  } catch (error) {
    logger.error(`Failed to generate signal for ${symbol || 'undefined'}: ${error}`);
    throw error;
  }
}